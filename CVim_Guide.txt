  -- Help ---------------------------------------------------------------

     \hm       show manual for word under the cursor (n,i)
     \hp       show plugin help                      (n,i)

  -- Comments -----------------------------------------------------------

  [n]\cl       end-of-line comment                 (n,v,i)
  [n]\cj       adjust end-of-line comment(s)       (n,v,i)
     \cs       set end-of-line comment column      (n)
  [n]\c*       code -> comment /* */               (n,v)
  [n]\cc       code -> comment //                  (n,v)
  [n]\co       comment -> code                     (n,v)
     \cfr      frame comment                       (n,i)
     \cfu      function comment                    (n,i)
     \cme      method description                  (n,i)
     \ccl      class description                   (n,i)
     \cfdi     file description (implementation)   (n,i)
     \cfdh     file description (header)           (n,i)
     \ccs      C/C++-file section  (tab. compl.)   (n,i)
     \chs      H-file section      (tab. compl.)   (n,i)
     \ckc      keyword comment     (tab. compl.)   (n,i)
     \csc      special comment     (tab. compl.)   (n,i)
     \cma      plugin macros       (tab. compl.)   (n,i)
     \cd       date                                (n,v,i)
     \ct       date \& time                        (n,v,i)
  [n]\cx       toggle comments: C <--> C++         (n,v,i)

  -- Statements ---------------------------------------------------------

     \sd       do { } while                        (n,v,i)
     \sf       for                                 (n,i)
     \sfo      for { }                             (n,v,i)
     \si       if                                  (n,i)
     \sif      if { }                              (n,v,i)
     \sie      if else                             (n,v,i)
     \sife     if { } else { }                     (n,v,i)
     \se       else { }                            (n,v,i)
     \sw       while                               (n,i)
     \swh      while { }                           (n,v,i)
     \ss       switch                              (n,v,i)
     \sc       case                                (n,i)
     \sb       {}                                  (n,v,i)

  -- Idioms -------------------------------------------------------------

     \if       function                            (n,v,i)
     \isf      function static                     (n,v,i)
     \im       main()                              (n,v,i)
     \ie       enum   + typedef                    (n,i)
     \is       struct + typedef                    (n,i)
     \iu       union  + typedef                    (n,i)
     \isc      scanf()                             (n,i)
     \ipr      printf()                            (n,i)
     \ica      p=calloc()                          (n,i)
     \ima      p=malloc()                          (n,i)
     \ire      p=realloc()                         (n,i)
     \isi      sizeof()                            (n,v,i)
     \ias      assert()                            (n,v)
     \ii       open input file                     (n,i)
     \io       open output file                    (n,i)
     \ifsc     fscanf                              (n,i)
     \ifpr     fprintf                             (n,i)
  [n]\i0       for( x=0; x<n; x+=1 )               (n,v,i)
  [n]\in       for( x=n-1; x>=0; x-=1 )            (n,v,i)

  -- Preprocessor -------------------------------------------------------

     \pih      include standard library header     (n,i)
     \pg       #include <>  (global)               (n,i)
     \pl       #include ""  (local)                (n,i)
     \pd       #define                             (n,i)
     \pu       #undef                              (n,i)
     \pif      #if  #endif                         (n,v,i)
     \pie      #if  #else #endif                   (n,v,i)
     \pid      #ifdef #else #endif                 (n,v,i)
     \pin      #ifndef #else #endif                (n,v,i)
     \pind     #ifndef #def #endif                 (n,v,i)
     \pe       #error                              (n,i)
     \pl       #line                               (n,i)
     \pp       #pragma                             (n,i)
     \pw       #warning                            (n,i)
     \pi0      #if 0 #endif                        (n,v,i)
     \pr0      remove #if 0 #endif                 (n,i)

  -- Snippets -----------------------------------------------------------

     \nr       read code snippet                   (n,i)
     \nv       view code snippet (read-only)       (n,i)
     \nw       write code snippet                  (n,v,i)
     \ne       edit code snippet                   (n,i)

  [n]\nf       pick up function prototype          (n,v,i)
  [n]\np       pick up function prototype          (n,v,i)
  [n]\nm       pick up method prototype            (n,v,i)
     \ni       insert prototype(s)                 (n,i)
     \nc       clear  prototype(s)                 (n,i)
     \ns       show   prototype(s)                 (n,i)

     \ntl      edit local templates                (n,i)
     \ntr      reread templates                    (n,i)
     \njt      include jump tags                   (n,i)

  -- C++ ----------------------------------------------------------------

     \+ih      include C++ standard library header (n,i)
     \+ich     include C standard library header   (n,i)
     \+om      output manipulators                 (n,i)
     \+fb      ios flag bits                       (n,i)
     \+c       class                               (n,i)
     \+cn      class (using new)                   (n,i)
     \+tc      template class                      (n,i)
     \+tcn     template class (using new)          (n,i)
     \+ec      error class                         (n,i)
     \+tf      template function                   (n,i)
     \+tr      try ... catch                       (n,v,i)
     \+ca      catch                               (n,v,i)
     \+caa     catch(...)                          (n,v,i)
     \+ex      extern "C" {  }                     (n,v,i)
     \+oif     open input file                     (n,v,i)
     \+oof     open output file                    (n,v,i)
     \+uns     using namespace std;                (n,v,i)
     \+un      using namespace xxx;                (n,v,i)
     \+unb     namespace xxx {  }                  (n,v,i)
     \+na      namespace alias                     (n,v,i)
     \+rt      RTTI                                (n,v,i)

     \+ic      class implementation                (n,i)
     \+icn     class (using new) implementation    (n,i)
     \+im      method implementation               (n,i)
     \+ia      accessor implementation             (n,i)
     \+itc     template class implementation       (n,i)
     \+itcn    template class (using new) impl.    (n,i)
     \+itm     template method implementation      (n,i)
     \+ita     template accessor implementation    (n,i)
     \+ioi     operator >>                         (n,i)
     \+ioo     operator <<                         (n,i)

  -- Run ----------------------------------------------------------------

    \rc       save and compile                    (n,i)
    \rl       link                                (n,i)
    \rr       run                                 (n,i)
    \ra       set comand line arguments           (n,i)
    \rm       run make                            (n,i)
    \rmc      run 'make clean'                    (n,i)
    \rcm      choose makefile                     (n,i)
    \rme      executable to run                   (n,i)
    \rma      cmd. line arg. for make             (n,i)
    \rp       run splint                          (n,i)
    \rpa      cmd. line arg. for splint           (n,i)
    \rcc      run cppcheck                        (n,i)
    \rccs     severity for cppcheck               (n,i)
    \rk       run CodeCheck (TM)                  (n,i)
    \rka      cmd. line arg. for CodeCheck (TM)   (n,i)
    \ri       run indent                          (n,v,i)
 [n]\rh       hardcopy buffer                     (n,v,i)
    \rs       show plugin settings                (n,i)
    \rx       set xterm size                      (n, only Linux/UNIX & GUI)
    \ro       change output destination           (n,i)


